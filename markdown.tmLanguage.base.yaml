fileTypes: [md, mdown, markdown, markdn, pandoc]
keyEquivalent: ^~M
name: Pandoc Markdown
patterns:
- {include: '#frontMatter'}
- {include: '#block'}
repository:
  block:
    patterns:
    - {include: '#separator'}
    - {include: '#heading'}
    - {include: '#blockquote'}
    - {include: '#lists'}
    {{languageIncludes}}
    - {include: '#fenced_code_block_unknown'}
    - {include: '#raw_block'}
    - {include: '#link-def'}
    - {include: '#html'}
    - {include: '#math-block'}
    - {include: '#paragraph'}
    repository:
      blockquote:
        begin: (^|\G)[ ]{0,3}(>) ?
        captures:
          '2': {name: beginning.punctuation.definition.quote.markdown}
        name: markup.quote.markdown
        patterns:
        - {include: '#block'}
        while: (^|\G)\s*(>) ?
{{languageDefinitions}}
      fenced_code_block_unknown:
        begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?=([^`~]*)?$)
        beginCaptures:
          '3': {name: punctuation.definition.markdown}
          '4': {name: fenced_code.block.language}
        end: (^|\G)(\2|\s{0,3})(\3)\s*$
        endCaptures:
          '3': {name: punctuation.definition.markdown}
        name: markup.fenced_code.block.markdown
      heading:
        begin: (?:^|\G)[ ]{0,3}(#{1,6})\s*(?=[\S[^#]])
        captures:
          '1': {name: punctuation.definition.heading.markdown}
        contentName: entity.name.section.markdown
        end: \s*(#{1,6})?$\n?
        name: markup.heading.markdown
        patterns:
        - {include: '#inline'}
      heading-setext:
        patterns:
        - {match: '^(={3,})(?=[ \t]*$\n?)', name: markup.heading.setext.1.markdown}
        - {match: '^(-{3,})(?=[ \t]*$\n?)', name: markup.heading.setext.2.markdown}
      html:
        patterns:
        - begin: (^|\G)\s*(<!--)
          captures:
            '1': {name: punctuation.definition.comment.html}
            '2': {name: punctuation.definition.comment.html}
          end: (-->)
          name: comment.block.html
        - begin: (^|\G)\s*(?=<(script|style|pre)(\s|$|>)(?!.*?</(script|style|pre)>))
          end: (?=.*</(script|style|pre)>)
          patterns:
          - begin: (\s*|$)
            patterns:
            - {include: text.html.basic}
            while: ^(?!.*</(script|style|pre)>)
        - begin: (^|\G)\s*(?=</?(address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(\s|$|/?>))
          patterns:
          - {include: text.html.basic}
          while: ^(?!\s*$)
        - begin: (^|\G)\s*(?=(<[a-zA-Z0-9\-](/?>|\s.*?>)|</[a-zA-Z0-9\-]>)\s*$)
          patterns:
          - {include: text.html.basic}
          while: ^(?!\s*$)
      link-def:
        captures:
          '1': {name: punctuation.definition.constant.markdown}
          '10': {name: punctuation.definition.string.end.markdown}
          '11': {name: string.other.link.description.title.markdown}
          '12': {name: punctuation.definition.string.begin.markdown}
          '13': {name: punctuation.definition.string.end.markdown}
          '2': {name: constant.other.reference.link.markdown}
          '3': {name: punctuation.definition.constant.markdown}
          '4': {name: punctuation.separator.key-value.markdown}
          '5': {name: punctuation.definition.link.markdown}
          '6': {name: markup.underline.link.markdown}
          '7': {name: punctuation.definition.link.markdown}
          '8': {name: string.other.link.description.title.markdown}
          '9': {name: punctuation.definition.string.begin.markdown}
        match: >
          (?x)
            \s*            # Leading whitespace
            (\[)(.+?)(\])(:)    # Reference name
            [ \t]*          # Optional whitespace
            (<?)(\S+?)(>?)      # The url
            [ \t]*          # Optional whitespace
            (?:
                ((\().+?(\)))    # Match title in quotesâ€¦
              | ((").+?("))    # or in parens.
            )?            # Title is optional
            \s*            # Optional whitespace
            $
        name: meta.link.reference.def.markdown
      list_paragraph:
        begin: (^|\G)(?=\S)(?![*+->]\s|[0-9]+\.\s)
        name: meta.paragraph.markdown
        patterns:
        - {include: '#inline'}
        - {include: text.html.basic}
        - {include: '#heading-setext'}
        while: (^|\G)(?!\s*$|#|[ ]{0,3}([-*_>][ ]{2,}){3,}[ \t]*$\n?|[ ]{0,3}[*+->]|[
          ]{0,3}[0-9]+\.)
      lists:
        patterns:
        - begin: (^|\G)([ ]{0,3})([*+-])([ ]{1,3}|\t)
          beginCaptures:
            '3': {name: beginning.punctuation.definition.list.markdown}
          comment: Currently does not support un-indented second lines.
          name: markup.list.unnumbered.markdown
          patterns:
          - {include: '#block'}
          - {include: '#list_paragraph'}
          while: ((^|\G)([ ]{4}|\t))|(^[ \t]*$)
        - begin: (^|\G)([ ]{0,3})([0-9]+\.)([ ]{1,3}|\t)
          beginCaptures:
            '3': {name: beginning.punctuation.definition.list.markdown}
          name: markup.list.numbered.markdown
          patterns:
          - {include: '#block'}
          - {include: '#list_paragraph'}
          while: ((^|\G)([ ]{4}|\t))|(^[ \t]*$)
      math-block: 
        patterns: 
        - name: markup.math.block.pfm
          begin: (\${2})
          beginCaptures: 
            '0': {name: support.gfm}
          end: \1
          endCaptures: 
            '0': {name: support.gfm}
          patterns: 
          - {include: '#math-syntax'}
        - name: markup.math.block.pfm
          begin: (?<!\\)\\\[
          beginCaptures: 
            '0': {name: support.gfm}
          end: \\\]
          endCaptures: 
            '0': {name: "support.gfm"}
          patterns: 
          - {include: '#math-syntax'}
      paragraph:
        begin: (^|\G)[ ]{0,3}(?=\S)
        name: meta.paragraph.markdown
        patterns:
        - {include: '#inline'}
        - {include: text.html.basic}
        - {include: '#heading-setext'}
        while: (^|\G)((?=\s*[-=]{3,}\s*$)|[ ]{4,}(?=\S))
      raw_block: {begin: '(^|\G)([ ]{4}|\t)', name: markup.raw.block.markdown, while: '(^|\G)([
          ]{4}|\t)'}
      separator: {match: '(^|\G)[ ]{0,3}([*-_])([ ]{0,2}\2){2,}[ \t]*$\n?', name: meta.separator.markdown}
  frontMatter:
    begin: \A-{3}\s*$
    contentName: meta.embedded.block.frontmatter
    patterns:
    - {include: source.yaml}
    while: ^(?!(-{3}|\.{3})\s*$)
  math-syntax: 
      patterns: 
      - captures: 
          '1': {name: punctuation.definition.constant.math.tex}
        match: (\\)(s(s(earrow|warrow|lash)|h(ort(downarrow|uparrow|parallel|leftarrow|rightarrow|mid)|arp)|tar|i(gma|m(eq)?)|u(cc(sim|n(sim|approx)|curlyeq|eq|approx)?|pset(neq(q)?|plus(eq)?|eq(q)?)?|rd|m|bset(neq(q)?|plus(eq)?|eq(q)?)?)|p(hericalangle|adesuit)|e(tminus|arrow)|q(su(pset(eq)?|bset(eq)?)|c(up|ap)|uare)|warrow|m(ile|all(s(etminus|mile)|frown)))|h(slash|ook(leftarrow|rightarrow)|eartsuit|bar)|R(sh|ightarrow|e|bag)|Gam(e|ma)|n(s(hort(parallel|mid)|im|u(cc(eq)?|pseteq(q)?|bseteq))|Rightarrow|n(earrow|warrow)|cong|triangle(left(eq(slant)?)?|right(eq(slant)?)?)|i(plus)?|u|p(lus|arallel|rec(eq)?)|e(q|arrow|g|xists)|v(dash|Dash)|warrow|le(ss|q(slant|q)?|ft(arrow|rightarrow))|a(tural|bla)|VDash|rightarrow|g(tr|eq(slant|q)?)|mid|Left(arrow|rightarrow))|c(hi|irc(eq|le(d(circ|S|dash|ast)|arrow(left|right)))?|o(ng|prod|lon|mplement)|dot(s|p)?|u(p|r(vearrow(left|right)|ly(eq(succ|prec)|vee(downarrow|uparrow)?|wedge(downarrow|uparrow)?)))|enterdot|lubsuit|ap)|Xi|Maps(to(char)?|from(char)?)|B(ox|umpeq|bbk)|t(h(ick(sim|approx)|e(ta|refore))|imes|op|wohead(leftarrow|rightarrow)|a(u|lloblong)|riangle(down|q|left(eq(slant)?)?|right(eq(slant)?)?)?)|i(n(t(er(cal|leave))?|plus|fty)?|ota|math)|S(igma|u(pset|bset))|zeta|o(slash|times|int|dot|plus|vee|wedge|lessthan|greaterthan|m(inus|ega)|b(slash|long|ar))|d(i(v(ideontimes)?|a(g(down|up)|mond(suit)?)|gamma)|o(t(plus|eq(dot)?)|ublebarwedge|wn(harpoon(left|right)|downarrows|arrow))|d(ots|agger)|elta|a(sh(v|leftarrow|rightarrow)|leth|gger))|Y(down|up|left|right)|C(up|ap)|u(n(lhd|rhd)|p(silon|harpoon(left|right)|downarrow|uparrows|lus|arrow)|lcorner|rcorner)|jmath|Theta|Im|p(si|hi|i(tchfork)?|erp|ar(tial|allel)|r(ime|o(d|pto)|ec(sim|n(sim|approx)|curlyeq|eq|approx)?)|m)|e(t(h|a)|psilon|q(slant(less|gtr)|circ|uiv)|ll|xists|mptyset)|Omega|D(iamond|ownarrow|elta)|v(d(ots|ash)|ee(bar)?|Dash|ar(s(igma|u(psetneq(q)?|bsetneq(q)?))|nothing|curly(vee|wedge)|t(heta|imes|riangle(left|right)?)|o(slash|circle|times|dot|plus|vee|wedge|lessthan|ast|greaterthan|minus|b(slash|ar))|p(hi|i|ropto)|epsilon|kappa|rho|bigcirc))|kappa|Up(silon|downarrow|arrow)|Join|f(orall|lat|a(t(s(emi|lash)|bslash)|llingdotseq)|rown)|P(si|hi|i)|w(p|edge|r)|l(hd|n(sim|eq(q)?|approx)|ceil|times|ightning|o(ng(left(arrow|rightarrow)|rightarrow|maps(to|from))|zenge|oparrow(left|right))|dot(s|p)|e(ss(sim|dot|eq(qgtr|gtr)|approx|gtr)|q(slant|q)?|ft(slice|harpoon(down|up)|threetimes|leftarrows|arrow(t(ail|riangle))?|right(squigarrow|harpoons|arrow(s|triangle|eq)?))|adsto)|vertneqq|floor|l(c(orner|eil)|floor|l|bracket)?|a(ngle|mbda)|rcorner|bag)|a(s(ymp|t)|ngle|pprox(eq)?|l(pha|eph)|rrownot|malg)|V(dash|vdash)|r(h(o|d)|ceil|times|i(singdotseq|ght(s(quigarrow|lice)|harpoon(down|up)|threetimes|left(harpoons|arrows)|arrow(t(ail|riangle))?|rightarrows))|floor|angle|r(ceil|parenthesis|floor|bracket)|bag)|g(n(sim|eq(q)?|approx)|tr(sim|dot|eq(qless|less)|less|approx)|imel|eq(slant|q)?|vertneqq|amma|g(g)?)|Finv|xi|m(ho|i(nuso|d)|o(o|dels)|u(ltimap)?|p|e(asuredangle|rge)|aps(to|from(char)?))|b(i(n(dnasrepma|ampersand)|g(s(tar|qc(up|ap))|nplus|c(irc|u(p|rly(vee|wedge))|ap)|triangle(down|up)|interleave|o(times|dot|plus)|uplus|parallel|vee|wedge|box))|o(t|wtie|x(slash|circle|times|dot|plus|empty|ast|minus|b(slash|ox|ar)))|u(llet|mpeq)|e(cause|t(h|ween|a))|lack(square|triangle(down|left|right)?|lozenge)|a(ck(s(im(eq)?|lash)|prime|epsilon)|r(o|wedge))|bslash)|L(sh|ong(left(arrow|rightarrow)|rightarrow|maps(to|from))|eft(arrow|rightarrow)|leftarrow|ambda|bag)|Arrownot)\b
        name: constant.character.math.tex
      - captures: 
          '1': {name: punctuation.definition.constant.math.tex}
        match: (\\)(sum|prod|coprod|int|oint|bigcap|bigcup|bigsqcup|bigvee|bigwedge|bigodot|bigotimes|bogoplus|biguplus)\b
        name: constant.character.math.tex
      - captures: 
          '1': {name: punctuation.definition.constant.math.tex}
        match: (\\)(arccos|arcsin|arctan|arg|cos|cosh|cot|coth|csc|deg|det|dim|exp|gcd|hom|inf|ker|lg|lim|liminf|limsup|ln|log|max|min|pr|sec|sin|sinh|sup|tan|tanh)\b
        name: constant.other.math.tex
      - begin: ((\\)Sexpr(\{))
        beginCaptures: 
          '1': {name: support.function.sexpr.math.tex}
          '2': {name: punctuation.definition.function.math.tex}
          '3': {name: punctuation.section.embedded.begin.math.tex}
        contentName: support.function.sexpr.math.tex
        end: (((\})))
        endCaptures: 
          '1': {name: support.function.sexpr.math.tex}
          '2': {name: punctuation.section.embedded.end.math.tex}
          '3': {name: source.r}
        name: meta.embedded.line.r
        patterns: 
        - begin: \G(?!\})
          end: (?=\})
          name: source.r
          patterns: 
          - include: source.r
      - captures: 
          '1': {name: punctuation.definition.constant.math.tex}
        match: (\\)([^a-zA-Z]|[A-Za-z]+)(?=\b|\}|\]|\^|\_)
        name: constant.other.general.math.tex
      - match: (([0-9]*[\.][0-9]+)|[0-9]+)
        name: constant.numeric.math.tex
      - match: --press a-z and space for greek letter--[a-zA-Z]*
        name: meta.placeholder.greek.math.tex
      - match: (?<!\\)[{}]
        name: punctuation.definition.arguments
  inline:
    patterns:
    - {include: '#ampersand'}
    - {include: '#bracket'}
    - {include: '#bold'}
    - {include: '#italic'}
    - {include: '#raw'}
    - {include: '#escape'}
    - {include: '#image-inline'}
    - {include: '#image-ref'}
    - {include: '#link-email'}
    - {include: '#link-inet'}
    - {include: '#link-inline'}
    - {include: '#link-ref'}
    - {include: '#link-ref-literal'}
    - {include: '#citation-bracketed'}
    - {include: '#citation-intext'}
    - {include: '#footnote-inline'}
    - {include: '#footnote-ref'}
    - {include: '#math-inline'}
    repository:
      ampersand:
        comment: "Markdown will convert this for us. We match it so that the HTML grammar will not mark it up as invalid."
        match: '&(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)'
        name: meta.other.valid-ampersand.markdown
      bold:
        begin: >
           (?x)
            (\*\*|__)(?=\S)                # Open
            (?=
              (
                <[^>]*+>              # HTML tags
                | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                  # Raw
                | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
                | \[
                (
                    (?<square>          # Named group
                      [^\[\]\\]        # Match most chars
                      | \\.            # Escaped chars
                      | \[ \g<square>*+ \]    # Nested brackets
                    )*+
                  \]
                  (
                    (              # Reference Link
                      [ ]?          # Optional space
                      \[[^\]]*+\]        # Ref name
                    )
                    | (              # Inline Link
                      \(            # Opening paren
                        [ \t]*+        # Optional whitespace
                        <?(.*?)>?      # URL
                        [ \t]*+        # Optional whitespace
                        (          # Optional Title
                          (?<title>['"])
                          (.*?)
                          \k<title>
                        )?
                      \)
                    )
                  )
                )
                | (?!(?<=\S)\1).            # Everything besides
                                  # style closer
              )++
              (?<=\S)\1                # Close
            )
        captures:
          '1': {name: punctuation.definition.bold.markdown}
        end: (?<=\S)(\1)
        name: markup.bold.markdown
        patterns:
        - applyEndPatternLast: 1
          begin: (?=<[^>]*?>)
          end: (?<=>)
          patterns:
          - {include: text.html.basic}
        - {include: '#escape'}
        - {include: '#ampersand'}
        - {include: '#bracket'}
        - {include: '#raw'}
        - {include: '#bold'}
        - {include: '#italic'}
        - {include: '#image-inline'}
        - {include: '#link-inline'}
        - {include: '#link-inet'}
        - {include: '#link-email'}
        - {include: '#image-ref'}
        - {include: '#link-ref-literal'}
        - {include: '#link-ref'}
        - {include: '#citation-bracketed'}
        - {include: '#citation-intext'}
        - {include: '#footnote-inline'}
        - {include: '#footnote-ref'}
        - {include: '#math-inline'}
      bracket:
        comment: "Markdown will convert this for us. We match it so that the HTML grammar will not mark it up as invalid."
        match: '<(?![a-z/?\$!])'
        name: meta.other.valid-bracket.markdown
      escape: {match: '\\[-`*_#+.!(){}\[\]\\>]', name: constant.character.escape.markdown}
      image-inline:
        captures:
          '1': {name: punctuation.definition.string.begin.markdown}
          '10': {name: punctuation.definition.string.markdown}
          '11': {name: punctuation.definition.string.markdown}
          '12': {name: string.other.link.description.title.markdown}
          '13': {name: punctuation.definition.string.markdown}
          '14': {name: punctuation.definition.string.markdown}
          '15': {name: punctuation.definition.metadata.markdown}
          '2': {name: string.other.link.description.markdown}
          '4': {name: punctuation.definition.string.end.markdown}
          '5': {name: punctuation.definition.metadata.markdown}
          '6': {name: punctuation.definition.link.markdown}
          '7': {name: markup.underline.link.image.markdown}
          '8': {name: punctuation.definition.link.markdown}
          '9': {name: string.other.link.description.title.markdown}
        match: >
          (?x)
            (\!\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])
                          # Match the link text.
            (\()            # Opening paren for url
              (<?)(\S+?)(>?)      # The url
              [ \t]*          # Optional whitespace
              (?:
                  ((\().+?(\)))    # Match title in parensâ€¦
                | ((").+?("))    # or in quotes.
              )?            # Title is optional
              \s*            # Optional whitespace
            (\))
        name: meta.image.inline.markdown
      image-ref:
        captures:
          '1': {name: punctuation.definition.string.begin.markdown}
          '2': {name: string.other.link.description.markdown}
          '4': {name: punctuation.definition.string.begin.markdown}
          '5': {name: punctuation.definition.constant.markdown}
          '6': {name: constant.other.reference.link.markdown}
          '7': {name: punctuation.definition.constant.markdown}
        match: (\!\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)(.*?)(\])
        name: meta.image.reference.markdown
      italic:
        begin: >
          (?x)
          (\*\b|\b_)(?=\S)                # Open
            (?=
              (
                <[^>]*+>              # HTML tags
                | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                  # Raw
                | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
                | \[
                (
                    (?<square>          # Named group
                      [^\[\]\\]        # Match most chars
                      | \\.            # Escaped chars
                      | \[ \g<square>*+ \]    # Nested brackets
                    )*+
                  \]
                  (
                    (              # Reference Link
                      [ ]?          # Optional space
                      \[[^\]]*+\]        # Ref name
                    )
                    | (              # Inline Link
                      \(            # Opening paren
                        [ \t]*+        # Optional whtiespace
                        <?(.*?)>?      # URL
                        [ \t]*+        # Optional whtiespace
                        (          # Optional Title
                          (?<title>['"])
                          (.*?)
                          \k<title>
                        )?
                      \)
                    )
                  )
                )
                | \1\1                # Must be bold closer
                | (?!(?<=\S)\1).            # Everything besides
                                  # style closer
              )++
              (?<=\S)\1                # Close
            )
        captures:
          '1': {name: punctuation.definition.italic.markdown}
        end: (?<=\S)(\1)((?!\1)|(?=\1\1))
        name: markup.italic.markdown
        patterns:
        - applyEndPatternLast: 1
          begin: (?=<[^>]*?>)
          end: (?<=>)
          patterns:
          - {include: text.html.basic}
        - {include: '#escape'}
        - {include: '#ampersand'}
        - {include: '#bracket'}
        - {include: '#raw'}
        - {include: '#bold'}
        - {include: '#image-inline'}
        - {include: '#link-inline'}
        - {include: '#link-inet'}
        - {include: '#link-email'}
        - {include: '#image-ref'}
        - {include: '#link-ref-literal'}
        - {include: '#link-ref'}
        - {include: '#citation-bracketed'}
        - {include: '#citation-intext'}
        - {include: '#footnote-inline'}
        - {include: '#footnote-ref'}
        - {include: '#math-inline'}
      link-email:
        captures:
          '1': {name: punctuation.definition.link.markdown}
          '2': {name: markup.underline.link.markdown}
          '4': {name: punctuation.definition.link.markdown}
        match: (<)((?:mailto:)?[-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(>)
        name: meta.link.email.lt-gt.markdown
      link-inet:
        captures:
          '1': {name: punctuation.definition.link.markdown}
          '2': {name: markup.underline.link.markdown}
          '3': {name: punctuation.definition.link.markdown}
        match: (<)((?:https?|ftp)://.*?)(>)
        name: meta.link.inet.markdown
      link-inline:
        captures:
          '1': {name: punctuation.definition.string.begin.markdown}
          '2': {name: string.other.link.title.markdown}
          '4': {name: punctuation.definition.string.end.markdown}
          '5': {name: punctuation.definition.metadata.markdown}
          '6': {name: punctuation.definition.link.markdown}
          '7': {name: markup.underline.link.markdown}
          '8': {name: punctuation.definition.link.markdown}
          '9': {name: string.other.link.description.title.markdown}
          '10': {name: punctuation.definition.string.begin.markdown}
          '11': {name: punctuation.definition.string.end.markdown}
          '12': {name: string.other.link.description.title.markdown}
          '13': {name: punctuation.definition.string.begin.markdown}
          '14': {name: punctuation.definition.string.end.markdown}
          '15': {name: punctuation.definition.metadata.markdown}
        match: >
          (?x)
            (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])
                          # Match the link text.
            (\()            # Opening paren for url
              (<?)(.*?)(>?)      # The url
              [ \t]*          # Optional whitespace
              (?:
                  ((\().+?(\)))    # Match title in parensâ€¦
                | ((").+?("))    # or in quotes.
              )?            # Title is optional
              \s*            # Optional whitespace
            (\))
        name: meta.link.inline.markdown
      link-ref:
        captures:
          '1': {name: punctuation.definition.string.begin.markdown}
          '2': {name: string.other.link.title.markdown}
          '4': {name: punctuation.definition.string.end.markdown}
          '5': {name: punctuation.definition.constant.begin.markdown}
          '6': {name: constant.other.reference.link.markdown}
          '7': {name: punctuation.definition.constant.end.markdown}
        match: (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])(\[)([^\]]*+)(\])
        name: meta.link.reference.markdown
      link-ref-literal:
        captures:
          '1': {name: punctuation.definition.string.begin.markdown}
          '2': {name: string.other.link.title.markdown}
          '4': {name: punctuation.definition.string.end.markdown}
          '5': {name: punctuation.definition.constant.begin.markdown}
          '6': {name: punctuation.definition.constant.end.markdown}
        match: (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)(\])
        name: meta.link.reference.literal.markdown
      citation-bracketed:
        name: meta.citation.bracketed.markdown
        begin: (\[)(?=.*?-?@[A-z_][\w:.#$%&\-+?<>~/]*.*?[^\\])
        end: (\])
        patterns:
        - match: ([\w\t :.#$%&+?<>~/-]*)?-?@([\w:.#$%&+?<>~/-]+),?([\w\t :.#$%&+?<>~/\\-]*)?
          captures:
            '1': {name: string.other.link.title.markdown}
            '2': {name: constant.other.reference.link.markdown}
            '3': {name: string.other.link.title.markdown}
        - {include: '#inline'}
        beginCaptures:
          '1': {name: punctuation.definition.string.begin.markdown}
        endCaptures:
          '1': {name: punctuation.definition.string.end.markdown}
      citation-intext:
        name: meta.citation.intext.markdown
        match: -?@([^\s\[]+)(\s*\[(.*)])?
        captures:
          '1': {name: constant.other.reference.link.markdown}
          '3': {name: string.other.link.title.markdown}
      footnote-inline:
        name: meta.footnote.inline.markdown
        contentName: string.other.link.title.markdown
        begin: \^\[
        end: \]
        patterns:
        - {include: '#inline'}
      footnote-ref:
        name: meta.footnote.ref.markdown
        match: (\[)(\^[\S]+)(])
        captures:
          '1': {name: punctuation.definition.string.begin.markdown}
          '2': {name: constant.other.reference.link.markdown}
          '3': {name: punctuation.definition.string.end.markdown}
      math-inline:
        patterns: 
        - name: markup.math.dollar-inline.pfm
          begin: (?<!\$)(\$)
          end: (\$)
          beginCaptures: 
            '1': {name: support.gfm}
          endCaptures:
            '1': {name: support.gfm}
          patterns:
          - {include: '#math-syntax'}
        - name: markup.math.paren-inline.pfm
          match: (\\\()([\S][^)]+)(\\\))
          captures: 
            1: {name: support.gfm}
            2: 
              patterns: 
              - include: '#math-syntax'
            3: {name: support.gfm}
      raw:
        captures:
          '1': {name: punctuation.definition.raw.markdown}
          '3': {name: punctuation.definition.raw.markdown}
        match: (`+)([^`]|(?!(?<!`)\1(?!`))`)*+(\1)
        name: markup.inline.raw.string.markdown
scopeName: text.html.pfm
# uuid: 0A1D9874-B448-11D9-BD50-000D93B6E43C
